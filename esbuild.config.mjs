import builtins from "builtin-modules";
import esbuild from "esbuild";
import esbuildSvelte from "esbuild-svelte";
import fs from "fs";
import path from "path";
import process from "process";
import sveltePreprocess from "svelte-preprocess";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const tools = process.argv[2] === "tools";

const rebuildPlugin = {
	name: "rebuild-handler",
	setup(build) {
		build.onEnd(async () => {
			await fs.promises.rename("dist/main.css", "dist/styles.css");
			await fs.promises.copyFile(
				path.join(path.resolve(), "manifest.json"),
				path.join(path.resolve(), "dist", "manifest.json")
			);
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/closebrackets",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/comment",
		"@codemirror/fold",
		"@codemirror/gutter",
		"@codemirror/highlight",
		"@codemirror/history",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/matchbrackets",
		"@codemirror/panel",
		"@codemirror/rangeset",
		"@codemirror/rectangular-selection",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/stream-parser",
		"@codemirror/text",
		"@codemirror/tooltip",
		"@codemirror/view",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	define: {
		"process.env.ENABLE_REACT_DEVTOOLS": tools
			? JSON.stringify("true")
			: JSON.stringify("false"),
	},
	treeShaking: true,
	outdir: "dist",
	plugins: [
		rebuildPlugin,
		esbuildSvelte({
			compilerOptions: { css: "external" },
			preprocess: sveltePreprocess(),
		}),
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
